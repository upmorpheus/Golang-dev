package fuse

import (
	"crypto/sha256"
	"encoding/binary"
	"hash"
	"math/rand"
)

// InodeNumberTree is a helper type that can be used to generate inode
// numbers for objects that don't have inode numbers themselves. Inode
// numbers are generated by providing a sequence of properties that
// identify the object.
//
// Applying the same sequence against the same InodeNumberTree will
// yield the same inode number. The generation process is deterministic.
// This means that the kernel's notion of inode equivalence corresponds
// with that of the userspace file system.
//
// Because every addition of a new property yields a new InodeNumberTree
// object, it is possible to provide every subtree of a hierarchy (e.g.,
// a subdirectory) a distinct inode number space, under the assumption
// there are no hash collisions.
type InodeNumberTree struct {
	sum [sha256.Size]byte
}

// DeterministicInodeNumberTree is an instance of InodeNumberTree that
// is initialized deterministically. This instance is provided for unit
// testing purposes.
var DeterministicInodeNumberTree = InodeNumberTree{
	sum: [...]byte{
		1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
		17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
	},
}

// NewRandomInodeNumberTree creates a new InodeNumberTree that is in a
// randomized initial state.
func NewRandomInodeNumberTree() InodeNumberTree {
	var it InodeNumberTree
	rand.Read(it.sum[:])
	return it
}

func (it InodeNumberTree) newHash() hash.Hash {
	h := sha256.New()
	h.Write(it.sum[:])
	return h
}

func newInodeNumberTreeFromHash(h hash.Hash) InodeNumberTree {
	var it InodeNumberTree
	h.Sum(it.sum[:0])
	return it
}

// AddString appends a string property to the identity of the current
// object, thereby yielding a new InodeNumberTree.
func (it InodeNumberTree) AddString(v string) InodeNumberTree {
	h := it.newHash()
	h.Write([]byte(v))
	return newInodeNumberTreeFromHash(h)
}

// AddUint64 appends an integer property to the identity of the current
// object, thereby yielding a new InodeNumberTree.
func (it InodeNumberTree) AddUint64(v uint64) InodeNumberTree {
	h := it.newHash()
	var b [8]byte
	binary.LittleEndian.PutUint64(b[:], v)
	h.Write(b[:])
	return newInodeNumberTreeFromHash(h)
}

// Get the inode number that corresponds to the identity of the current
// object.
func (it InodeNumberTree) Get() uint64 {
	return binary.LittleEndian.Uint64(it.sum[:])
}
