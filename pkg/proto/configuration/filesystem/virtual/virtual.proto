syntax = "proto3";

package buildbarn.configuration.filesystem.virtual;

import "google/protobuf/duration.proto";

option go_package = "github.com/buildbarn/bb-remote-execution/pkg/proto/configuration/filesystem/virtual";

message MountConfiguration {
  // Path where the mount needs to be created.
  string mount_path = 1;

  oneof backend {
    // Use the kernel's FUSE driver to expose the mount.
    //
    // This option is supported on Linux and macOS, though its use is
    // only recommended on Linux. On macOS, this option requires the
    // OSXFUSE or macFUSE kernel extension to be installed. This kernel
    // extension tends to cause system lockups under high load.
    FUSEMountConfiguration fuse = 2;

    // Run an in-process NFSv4 server and use the kernel's NFSv4 client
    // to expose the mount. This option is currently only supported on
    // macOS.
    //
    // The NFS server is expected to conform to NFSv4.0 (RFC 7530).
    // Features provided by newer versions of the protocol, such as
    // NFSv4.1 (RFC 8881) and NFSv4.2 (RFC 7862), are not supported at
    // this time. macOS also does not support the latter.
    NFSv4MountConfiguration nfsv4 = 3;
  }
}

message FUSEMountConfiguration {
  // The amount of time the kernel is permitted to cache directory
  // entries. When left unset, the kernel is not permitted to cache this
  // data at all, causing it to issue more LOOKUP requests.
  //
  // Because bb_worker is capable of sending NOTIFY_ENTRY messages to
  // the kernel to actively invalidate directory entries, it is
  // generally safe to turn on directory entry caching. For bb_clientd
  // it is also safe to enable this option, as directory contents are
  // immutable. Not all implementations may respect this option.
  //
  // Recommended value: 300s
  google.protobuf.Duration directory_entry_validity = 2;

  // The amount of time the kernel is permitted to cache inode
  // attributes. When left unset, the kernel is not permitted to cache this
  // data at all, causing it to issue more GETATTR requests.
  //
  // Because files placed in the FUSE file system by bb_worker itself
  // are immutable, it is generally safe to turn on inode attribute
  // caching. For bb_clientd it is also safe to enable this option, as
  // files are immutable. Not all implementations may respect this
  // option.
  //
  // Recommended value: 300s
  google.protobuf.Duration inode_attribute_validity = 3;

  // System-wide maximum of dirty pages this FUSE mount may have.
  // Assigning a non-zero value causes the /sys/class/bdi/${device}/max_ratio
  // sysfs value on Linux to be set. This option is documented here:
  // https://www.kernel.org/doc/Documentation/ABI/testing/sysfs-class-bdi
  //
  // By default, Linux only allows 1% of vm.dirty_ratio of memory to be
  // dirty pages belonging to the FUSE mount. This may be insufficient
  // for workloads that depend on random access writes to large files.
  // Increasing this value may speed up writes against the FUSE file
  // system, at the cost of slowing down writes against other volumes.
  //
  // If random access writes against the FUSE file system are still
  // slower than desired, performance may be increased by removing the
  // use of BDI_CAP_STRICTLIMIT from the Linux kernel's fs/fuse/inode.c.
  // Make this modification at your own risk. More details:
  // https://sourceforge.net/p/fuse/mailman/message/36457896/
  //
  // Recommended value: unset
  int32 maximum_dirty_pages_percentage = 4;

  // Was 'shuffle_directory_listings'. This option has been promoted up to
  // bb_worker's VirtualBuildDirectoryConfiguration.
  reserved 5;

  // Provide the "allow_other" mount option, thereby allowing other
  // users on the system to access the FUSE mount point as well.
  //
  // This option needs to be enabled if bb_worker is configured to use
  // privilege separation, as build actions wouldn't be able to access
  // their build directory otherwise.
  //
  // This option may be useful for bb_clientd in case files need to be
  // accessible to debugging tools that require administrative
  // privileges. Care should be taken that other access controls (e.g.,
  // permissions on parent directories) are in place to prevent
  // unintended access to the mount point.
  bool allow_other = 6;

  // If set, the FUSE mount is created by calling mount() directly, as
  // opposed to invoking the fusermount utility. This option needs to be
  // enabled in environments where the fusermount utility is not
  // available, such as the bb_worker container images.
  bool direct_mount = 7;
}

message NFSv4MountConfiguration {
  oneof operating_system {
    // Configuration options specific to mounting the NFSv4 file system
    // on macOS.
    NFSv4DarwinMountConfiguration darwin = 1;
  }

  // The amount of time that needs to pass for the server to close files
  // and remove state belonging to a client that has not shown any
  // activity.
  //
  // This option also controls how long state associated with a single
  // process on a client (an 'open-owner') is allowed to continue to
  // exist on the server if no files are opened, or if left unconfirmed.
  //
  // Recommended value: 120s
  google.protobuf.Duration enforced_lease_time = 2;

  // The lease time to announce to clients through the FATTR4_LEASE_TIME
  // attribute. This option should be set lower than
  // 'enforced_lease_time', as it needs to account for network delays
  // and instability.
  //
  // Recommended value: 60s
  google.protobuf.Duration announced_lease_time = 3;
}

message NFSv4DarwinMountConfiguration {
  // Path on which to bind the UNIX socket of the NFSv4 server. The
  // kernel will connect to this socket when mounting.
  //
  // NOTE: No facilities are provided to set the ownership or
  // permissions on the socket file. On most operating systems, the
  // socket file will have mode 0777. How the mode is interpreted when
  // changed is inconsistent between operating systems. Some require the
  // socket to be writable in order to connect, while others ignore the
  // permissions altogether.
  //
  // It is therefore strongly advised that socket files are placed
  // inside directories that have access controls set up properly.
  //
  // TODO: Using UNIX sockets currently causes EIO errors under high
  // load, caused by EMSGSIZE errors returned to the kernel's NFS client
  // while writing data into the UNIX socket. As a workaround, this
  // option can be left empty, causing to use TCP instead. This should
  // be removed once rdar://82122890 is addressed.
  string socket_path = 1;

  // When set, override the minimum amount of time attributes of
  // directories may be cached. This option is equivalent to
  // mount_nfs(8)'s 'acdirmin'.
  //
  // Because the macOS NFS client doesn't support NFSv4.1's CB_NOTIFY
  // callback operation, there is no way this backend can inform the
  // kernel of files being removed from directories. Because of this, it
  // is recommended that attribute caching timeouts for directories is
  // either reduced or disabled, so that removals are detected more
  // quickly.
  //
  // Recommended value:
  // - For bb_worker: 1s
  // - For bb_clientd: 0s
  google.protobuf.Duration minimum_directories_attribute_cache_timeout = 2;

  // When set, override the maximum amount of time attributes of
  // directories may be cached. This option is equivalent to
  // mount_nfs(8)'s 'acdirmax'.
  //
  // Recommended value:
  // - For bb_worker: 1s
  // - For bb_clientd: 0s
  google.protobuf.Duration maximum_directories_attribute_cache_timeout = 3;
}
