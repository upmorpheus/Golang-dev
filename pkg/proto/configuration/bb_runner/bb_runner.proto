syntax = "proto3";

package buildbarn.configuration.bb_runner;

import "pkg/proto/configuration/global/global.proto";
import "pkg/proto/configuration/grpc/grpc.proto";

option go_package = "github.com/buildbarn/bb-remote-execution/pkg/proto/configuration/bb_runner";

message ApplicationConfiguration {
  // Directory where builds take place.
  string build_directory_path = 1;

  // gRPC servers to spawn to listen for requests from bb_worker.
  repeated buildbarn.configuration.grpc.ServerConfiguration grpc_servers = 2;

  // Temporary directories that should be cleaned up after a build action
  // (e.g. /tmp).
  repeated string temporary_directories = 3;

  // Common configuration options that apply to all Buildbarn binaries.
  buildbarn.configuration.global.Configuration global = 4;

  // Run every build action with the TMPDIR environment variable set to
  // point to a location inside the build directory. This causes
  // temporary files to be cleaned up automatically on the build
  // action's behalf, assuming it properly respects the environment
  // variable.
  bool set_tmpdir_environment_variable = 5;

  // Optional helper process for resolving /tmp.
  buildbarn.configuration.grpc.ClientConfiguration
      temporary_directory_installer = 6;

  // Chroot into the input root to run commands. This option can be used
  // if the input root contains a full userland installation. This
  // feature is used by the BuildStream build system.
  bool chroot_into_input_root = 7;

  // Kill processes that are left behind by build actions that are
  // running in the background.
  //
  // Enabling this feature causes all processes to be killed that run as
  // the same user ID as bb_runner (or the one configured through
  // 'run_commands_as') and were spawned after bb_runner. This feature
  // must not be enabled when the same user ID is used for other
  // purposes (e.g., running multiple bb_runners), as this may cause
  // unrelated processes to be killed.
  bool clean_process_table = 8;

  // If set, scan the entire filesystem to verify that the only writable paths
  // on the filesystem are those specified as allowed (or children thereof).
  FilesystemWritabilityCheckerConfiguration filesystem_writability_checker = 9;

  // List of paths that need to exist on the system for the runner to be
  // considered healthy. This option may be set to let a runner stop
  // accepting more work in case a remote file system becomes
  // unavailable.
  repeated string readiness_checking_pathnames = 10;

  // When set, run commands as another user. On most platforms, this
  // requires bb_runner to run as root.
  UNIXCredentialsConfiguration run_commands_as = 11;
}

message FilesystemWritabilityCheckerConfiguration {
  // Paths which are allowed to be writable despite
  // the checker being enabled.
  // If these are directories, they are allowed children too.
  //
  // Note that on platforms with enumeratable virtual filesystems
  // (e.g. /proc and /sys on Linux), you probably want to list them here.
  //
  // If you have any temporary directories set, you probably want to add them
  // here.
  // Depending on your configuration, you may also want to add the build
  // directory path.
  repeated string allowed_writable_paths = 1;
}

message UNIXCredentialsConfiguration {
  // The user ID that should be used to run commands.
  uint32 user_id = 1;

  // The primary group ID that should be used to run commands.
  uint32 group_id = 2;

  // Additional groups of which the process should be a member.
  repeated uint32 additional_group_ids = 3;
}
