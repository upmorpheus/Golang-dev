# gazelle:ignore

load("@bazel_gomock//:gomock.bzl", "gomock")
load("@io_bazel_rules_go//go:def.bzl", "go_library")

gomock(
    name = "aliases",
    out = "aliases.go",
    interfaces = [
        "FUSEDirectory",
        "FUSELeaf",
    ],
    library = "//internal/mock/aliases",
    package = "mock",
    tags = ["manual"],
)

gomock(
    name = "blobstore",
    out = "blobstore.go",
    interfaces = ["BlobAccess"],
    library = "@com_github_buildbarn_bb_storage//pkg/blobstore",
    package = "mock",
)

gomock(
    name = "blockdevice",
    out = "blockdevice.go",
    interfaces = ["BlockDevice"],
    library = "@com_github_buildbarn_bb_storage//pkg/blockdevice",
    package = "mock",
)

gomock(
    name = "builder",
    out = "builder.go",
    interfaces = [
        "BuildDirectory",
        "BuildDirectoryCreator",
        "BuildExecutor",
        "PlatformHooks",
        "StorageFlusher",
        "UploadableDirectory",
    ],
    library = "//pkg/builder",
    package = "mock",
)

gomock(
    name = "buildqueuestate",
    out = "buildqueuestate.go",
    interfaces = ["BuildQueueStateServer"],
    library = "//pkg/proto/buildqueuestate",
    package = "mock",
)

gomock(
    name = "cas",
    out = "cas.go",
    interfaces = [
        "DirectoryFetcher",
        "DirectoryWalker",
        "FileFetcher",
    ],
    library = "//pkg/cas",
    package = "mock",
)

gomock(
    name = "cleaner",
    out = "cleaner.go",
    interfaces = [
        "Cleaner",
        "ProcessTable",
    ],
    library = "//pkg/cleaner",
    package = "mock",
)

gomock(
    name = "clock",
    out = "clock.go",
    interfaces = [
        "Clock",
        "Timer",
    ],
    library = "@com_github_buildbarn_bb_storage//pkg/clock",
    package = "mock",
)

gomock(
    name = "cloud_aws",
    out = "cloud_aws.go",
    interfaces = [
        "AutoScaling",
        "LifecycleHookHandler",
        "SQS",
        "SQSMessageHandler",
    ],
    library = "//pkg/cloud/aws",
    package = "mock",
)

gomock(
    name = "filesystem",
    out = "filesystem.go",
    interfaces = [
        "Directory",
        "DirectoryCloser",
        "FileReader",
        "FileReadWriter",
        "FileWriter",
    ],
    library = "@com_github_buildbarn_bb_storage//pkg/filesystem",
    package = "mock",
)

gomock(
    name = "filesystem_re",
    out = "filesystem_re.go",
    interfaces = [
        "DirectoryOpener",
        "FilePool",
        "SectorAllocator",
    ],
    library = "//pkg/filesystem",
    package = "mock",
)

gomock(
    name = "fuse",
    out = "fuse.go",
    interfaces = [
        "CASFileFactory",
        "ChildFilter",
        "EntryNotifier",
        "FileAllocator",
        "InitialContentsFetcher",
        "NativeLeaf",
    ],
    library = "//pkg/filesystem/fuse",
    package = "mock",
    tags = ["manual"],
)

gomock(
    name = "go_fuse",
    out = "go_fuse.go",
    interfaces = [
        "RawFileSystem",
        "ReadDirEntryList",
        "ReadDirPlusEntryList",
        "ServerCallbacks",
    ],
    library = "@com_github_hanwen_go_fuse_v2//fuse",
    package = "mock",
    tags = ["manual"],
)

gomock(
    name = "initialsizeclass",
    out = "initialsizeclass.go",
    interfaces = [
        "Learner",
        "PreviousExecutionStatsHandle",
        "PreviousExecutionStatsStore",
        "Selector",
        "StrategyCalculator",
    ],
    library = "//pkg/builder/initialsizeclass",
    package = "mock",
)

gomock(
    name = "random",
    out = "random.go",
    interfaces = [
        "SingleThreadedGenerator",
        "ThreadSafeGenerator",
    ],
    library = "@com_github_buildbarn_bb_storage//pkg/random",
    package = "mock",
)

gomock(
    name = "remoteexecution",
    out = "remoteexecution.go",
    interfaces = [
        "Execution_ExecuteServer",
        "Execution_WaitExecutionServer",
    ],
    library = "@com_github_bazelbuild_remote_apis//build/bazel/remote/execution/v2:execution",
    package = "mock",
)

gomock(
    name = "remoteworker",
    out = "remoteworker.go",
    interfaces = ["OperationQueueClient"],
    library = "//pkg/proto/remoteworker",
    package = "mock",
)

gomock(
    name = "runner",
    out = "runner.go",
    interfaces = [
        "RunnerClient",
        "RunnerServer",
    ],
    library = "//pkg/proto/runner",
    package = "mock",
)

gomock(
    name = "storage_builder",
    out = "storage_builder.go",
    interfaces = ["BuildQueue"],
    library = "@com_github_buildbarn_bb_storage//pkg/builder",
    package = "mock",
)

gomock(
    name = "storage_util",
    out = "storage_util.go",
    interfaces = [
        "ErrorLogger",
        "UUIDGenerator",
    ],
    library = "@com_github_buildbarn_bb_storage//pkg/util",
    package = "mock",
)

go_library(
    name = "mock",
    srcs = [
        ":blobstore.go",
        ":blockdevice.go",
        ":builder.go",
        ":buildqueuestate.go",
        ":cas.go",
        ":cleaner.go",
        ":clock.go",
        ":cloud_aws.go",
        ":filesystem.go",
        ":filesystem_re.go",
        ":initialsizeclass.go",
        ":random.go",
        ":remoteexecution.go",
        ":remoteworker.go",
        ":runner.go",
        ":storage_builder.go",
        ":storage_util.go",
    ] + select({
        "@io_bazel_rules_go//go/platform:darwin": [
            ":aliases.go",
            ":fuse.go",
            ":go_fuse.go",
        ],
        "@io_bazel_rules_go//go/platform:linux": [
            ":aliases.go",
            ":fuse.go",
            ":go_fuse.go",
        ],
        "//conditions:default": [],
    }),
    importpath = "github.com/buildbarn/bb-remote-execution/internal/mock",
    visibility = ["//:__subpackages__"],
    deps = [
        "//pkg/builder",
        "//pkg/builder/initialsizeclass",
        "//pkg/cas",
        "//pkg/cleaner",
        "//pkg/filesystem",
        "//pkg/filesystem/fuse",
        "//pkg/proto/buildqueuestate",
        "//pkg/proto/outputpathpersistency",
        "//pkg/proto/remoteoutputservice",
        "//pkg/proto/remoteworker",
        "//pkg/proto/runner",
        "@com_github_aws_aws_sdk_go//service/autoscaling",
        "@com_github_aws_aws_sdk_go//service/ec2",
        "@com_github_aws_aws_sdk_go//service/sqs",
        "@com_github_bazelbuild_remote_apis//build/bazel/remote/execution/v2:execution",
        "@com_github_buildbarn_bb_storage//pkg/blobstore",
        "@com_github_buildbarn_bb_storage//pkg/blobstore/buffer",
        "@com_github_buildbarn_bb_storage//pkg/builder",
        "@com_github_buildbarn_bb_storage//pkg/clock",
        "@com_github_buildbarn_bb_storage//pkg/digest",
        "@com_github_buildbarn_bb_storage//pkg/filesystem",
        "@com_github_buildbarn_bb_storage//pkg/filesystem/path",
        "@com_github_buildbarn_bb_storage//pkg/proto/cas",
        "@com_github_buildbarn_bb_storage//pkg/proto/iscc",
        "@com_github_buildbarn_bb_storage//pkg/util",
        "@com_github_golang_mock//gomock",
        "@com_github_google_uuid//:uuid",
        "@go_googleapis//google/longrunning:longrunning_go_proto",
        "@org_golang_google_grpc//:grpc",
        "@org_golang_google_grpc//metadata",
        "@org_golang_google_protobuf//types/known/anypb:go_default_library",
        "@org_golang_google_protobuf//types/known/emptypb:go_default_library",
    ] + select({
        "@io_bazel_rules_go//go/platform:darwin": [
            "@com_github_hanwen_go_fuse_v2//fuse",
        ],
        "@io_bazel_rules_go//go/platform:linux": [
            "@com_github_hanwen_go_fuse_v2//fuse",
        ],
        "//conditions:default": [],
    }),
)
